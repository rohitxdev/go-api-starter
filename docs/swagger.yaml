basePath: /v1
definitions:
  handler.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handler.LogInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.LogInResponse:
    properties:
      access_token:
        type: string
    type: object
  handler.SignUpResponse:
    properties:
      access_token:
        type: string
    type: object
  repo.User:
    properties:
      account_status:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: integer
      image_url:
        type: string
      phone_number:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8443
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Golang API server.
  license:
    name: GNU GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html#license-text
  termsOfService: http://swagger.io/terms/
  title: Golang API
  version: "1.0"
paths:
  /auth/access-token:
    get:
      consumes:
      - application/json
      description: Get access token if user is logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get access token
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Send password reset email
      tags:
      - auth
  /auth/log-in:
    post:
      consumes:
      - application/json
      description: Log into application
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LogInResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Log in
      tags:
      - auth
  /auth/log-out:
    post:
      description: Log out of application
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Log out
      tags:
      - auth
  /auth/oauth2/{provider}:
    get:
      consumes:
      - application/json
      description: Log in with OAuth2
      parameters:
      - description: OAuth2 provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LogInResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: OAuth2 Login
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - multipart/form-data
      description: Sign up for application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.SignUpResponse'
      summary: Sign up
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get info of current user
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.User'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get me
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all users
      tags:
      - users
swagger: "2.0"
