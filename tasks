#!/usr/bin/env bash

set -o allexport

ENV_FILE="${ENV_FILE:-".env"}"

if [[ -r $ENV_FILE ]]; then
    # shellcheck disable=SC1090
    source "$ENV_FILE"
else
    printf "\x1b[93m%s\x1b[0m\n" "Warning: Cannot read from \"$ENV_FILE\". Make sure the file path is correct & has required permissions." >&2
fi

GO_VERSION=$(go list -m -f "{{.GoVersion}}")
PACKAGE_NAME=$(go list -m)
APP_NAME=${PACKAGE_NAME##*/}
APP_VERSION=$(git describe --tags --always)

set +o allexport

set -e

# Run development server in docker
function docker-watch() {
    local compose_file="docker-compose.yaml"
    docker compose -f "$compose_file" down --remove-orphans
    docker compose -f "$compose_file" up --build
}

# Build docker image for release
function docker-build() {
    local default_tag="$APP_NAME:$APP_VERSION"
    local tag="${1:-$default_tag}"
    docker build --tag="$tag" --target="production" --platform="linux/amd64" --build-arg="GO_VERSION=$GO_VERSION" .
}

# Push docker image to dockerhub
function docker-push() {
    local default_tag="$APP_NAME:$APP_VERSION"
    local tag="${1:-$default_tag}"
    local repo_name
    repo_name=$(echo "$tag" | cut -d ':' -f 1)
    docker push "${1:-$tag}"
    # Tag and push image as latest
    docker tag "$tag" "$repo_name:latest"
    docker push "$repo_name:latest"
}

# Run go app and watch for changes
function watch() {
    local build_path="./tmp/build"
    # build.kill_delay is in nanoseconds
    air --build.cmd="go build --ldflags=\"-X main.BuildId=$APP_NAME.$APP_VERSION.debug\" --race -o $build_path  ." \
        --build.bin="$build_path" --build.delay="0" --build.kill_delay="10000000000" \
        --build.include_ext="go,tmpl,env" --build.send_interrupt="true" --log.main_only="true" --misc.clean_on_exit="true"
}

# Build go app for release and generate swagger docs
function build() {
    swag init -g internal/handler/router.go
    echo "building app..."
    if CGO_ENABLED=0 go build --ldflags="-s -w -X main.BuildId=$APP_NAME.$APP_VERSION.release -extldflags=-static" \
        --trimpath --buildmode=pie --pgo default.pgo -o ./bin/build .; then
        echo "build successful ✅"
    else
        echo "build failed "
        exit 1
    fi
}

# Run go app build
function start() {
    local build_path="./bin/build"
    if [[ ! -x "$build_path" ]]; then
        build
    fi
    $build_path
}

# Run tests
function test() {
    go test --race --count=2 -v ./...
}

# Run tests and show coverage
function test-cover() {
    go test --race --coverprofile=./tmp/coverage.out ./... && go tool cover --html=./tmp/coverage.out
}

# Run benchmarks
function bench() {
    go test --race --count=2 -v --benchmem --bench=. ./...
}

# Clean go mod & cache & remove build artifacts
function clean() {
    go mod tidy
    go clean --cache
    rm -rf ./bin ./tmp
}

# Install dependencies
function init() {
    go install github.com/air-verse/air@latest
    go install github.com/swaggo/swag/cmd/swag@latest
    go mod download
}

# Generate pprof profile
function pprof() {
    curl "http://localhost:${PORT:-"8080"}/debug/pprof/profile?seconds=30" >default.pgo
}

# Create a git checkpoint and push to remote repository
function checkpoint() {
    local res
    read -p "Create git checkpoint and push to remote repository? (y/n): " -rs res
    echo

    if [[ "$res" == "y" || "$res" == "Y" ]]; then
        git add . && git commit -m "Checkpoint at $(date '+%Y-%m-%dT%H:%M:%S%z')" && git push && printf "\x1b[92m%s\x1b[0m\n" "Checkpoint created and pushed to remote ✔"
    else
        printf "\x1b[95m%s\x1b[0m\n" "Quitting..."
    fi
}

menu=$(awk '/^function/ { print NR, $2 }' "$0" | while read -r v func; do
    desc=$(awk "NR==$((v - 1))" "$0")
    [[ "$desc" ]] && printf "➤ %-12s - %s\n" "${func//()/}" "${desc//#/}" || printf ""
done)

if declare -F "$1" >/dev/null; then
    "$@"
else
    printf "\x1b[95m %s\x1b[0m\n%s\n%s\n" "Available tasks" "$menu" "Usage: $0 <task>"
fi
