#!/usr/bin/env bash

set -o allexport

ENV_FILE="${ENV_FILE:-".env"}"

if [[ -r $ENV_FILE ]]; then
    # shellcheck disable=SC1090
    source "$ENV_FILE"
else
    printf "\x1b[93m%s\x1b[0m\n" "Warning: Cannot read from \"$ENV_FILE\". Make sure the file path is correct & has required permissions." >&2
fi

GO_VERSION=$(go list -m -f "{{.GoVersion}}")
PACKAGE_NAME=$(go list -m)
APP_NAME=${PACKAGE_NAME##*/}
APP_VERSION=$(git describe --tags --always --dirty)
DOCKERHUB_REPO_NAME=$(echo "$PACKAGE_NAME" | awk -F'/' '{print $2 "/" $3}')

set +o allexport

set -e

build_name_prefix="$APP_NAME.$APP_VERSION"
build_debug_args=(--ldflags="-X $PACKAGE_NAME/internal/config.BuildInfo=$build_name_prefix.debug" --race)
build_release_args=(--ldflags="-s -w -X $PACKAGE_NAME/internal/config.BuildInfo=$build_name_prefix.release -extldflags=-static" --trimpath --buildmode=pie)

case $1 in
"docker-watch")
    compose_file="docker-compose.yml"
    docker compose -f "$compose_file" down --remove-orphans
    docker compose -f "$compose_file" up --build
    ;;
"docker-build")
    docker build --tag="$APP_NAME":"$APP_VERSION" --target="prod" --build-arg="GO_VERSION=$GO_VERSION" .
    ;;
"docker-push")
    docker login
    docker tag "$APP_NAME":"$APP_VERSION" "$DOCKERHUB_REPO_NAME":"$APP_VERSION"
    docker push "$DOCKERHUB_REPO_NAME":"$APP_VERSION"
    ;;
"watch")
    # build.kill_delay is in nanoseconds
    air --tmp_dir="bin/tmp" --build.bin="\"$0\" run" --build.delay="0" --build.kill_delay="10000000000" \
        --build.include_ext="go,tmpl,env" --build.send_interrupt="true" --log.main_only="true" --misc.clean_on_exit="true"
    ;;
"run")
    go run "${build_debug_args[@]}" .
    ;;
"start")
    if [[ ! -x "./bin/build" ]]; then
        echo "Build not found. Building..."
        sleep 1
        $0 build
    fi
    ./bin/build
    ;;
"build")
    swag init -g internal/handler/router.go
    echo "building app..." && CGO_ENABLED=0 go build --pgo default.pgo "${build_release_args[@]}" -o ./bin/build ./main.go && echo "built app successfully ✔"
    ;;
"test")
    go test --race --count=2 -v ./...
    ;;
"test-cover")
    go test --race --coverprofile=./tmp/coverage.out ./... && go tool cover --html=./tmp/coverage.out
    ;;
"bench")
    go test --race --count=2 -v --benchmem --bench=. ./...
    ;;
"clean")
    go mod tidy
    go clean --cache
    ;;
"init")
    go install github.com/air-verse/air@latest
    go install github.com/swaggo/swag/cmd/swag@latest
    go mod download
    ;;
"pprof")
    curl "http://localhost:${PORT:-"8000"}/debug/pprof/profile?seconds=30" >default.pgo
    ;;
"checkpoint")
    git add . && git commit -m "Checkpoint at $(date "+%Y-%m-%dT%H:%M:%S%z")" && git push && echo "Checkpoint created and pushed to remote ✔"
    ;;
*)
    menu="
➤ docker-watch    -  Run development server in docker
➤ docker-build    -  Build docker image
➤ docker-push     -  Push docker image to dockerhub
➤ watch           -  Run go app and watch for changes
➤ run             -  Run go app without building (for development)
➤ start           -  Run go app build
➤ build           -  Build go app (for release)
➤ test            -  Run tests
➤ test-cover      -  Run tests and show coverage
➤ bench           -  Run benchmarks
➤ clean           -  Clean go mod & cache
➤ init            -  Install dependencies
➤ pprof           -  Generate pprof profile
➤ checkpoint      -  Create a git checkpoint and push to remote
"
    printf "\x1b[95m %s\x1b[0m%s\n%s\n" "Available tasks" "$menu" "Usage: $0 <task>"
    ;;
esac
