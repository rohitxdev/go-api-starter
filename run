#!/usr/bin/env bash

set -e
set -o allexport

ENV_FILE="${ENV_FILE:-".env"}"
# shellcheck disable=SC1090
[[ -r $ENV_FILE ]] && source "$ENV_FILE"

PACKAGE_NAME=$(awk '/^module/ { print $2 }' go.mod)
APP_NAME="$(echo "$PACKAGE_NAME" | cut -d '/' -f 3)"
APP_VERSION="$(git describe --tags --always --dirty)"
GO_VERSION=$(awk '/^go/ { print $2 }' go.mod)
BASE_IMAGE_TAG=":$GO_VERSION-alpine3.20"

set +o allexport

prompt() {
    read -p "$1 [y/n]: " -s -n 1 -r res
    echo
    [[ "$res" =~ ^[Yy]$ ]]
}

print() {
    declare -A colors=(["debug"]="30" ["loading"]="36" ["info"]="37" ["success"]="32" ["warn"]="33" ["error"]="31")
    local prefix
    case "$1" in
    "debug") prefix="• " ;;
    "loading") prefix="⧗ " ;;
    "info") prefix="➤ " ;;
    "success") prefix="✔ " ;;
    "warn") prefix="⚠ " ;;
    "error") prefix="✗ " ;;
    *) prefix="" ;;
    esac

    local text="$prefix$2"
    if tput colors &>/dev/null; then
        printf "\x1b[%sm%s\x1b[0m\n" "${colors[$1]:-white}" "$text"
    else
        printf "%s\n" "$text"
    fi
}

print_menu() {
    local -a tasks
    while read -r n task_name; do
        task_name=$(echo "$task_name" | sed 's/task_//; s/() {//')
        task_desc=$(awk "NR==$((n - 1))" "$0")
        tasks+=("$(printf "%-16s - %s\n" "$task_name" "${task_desc:1}")")
    done <<<"$(awk '/^task_/ { print NR, $0 }' "$0")"

    mapfile -t tasks < <(printf "%s\n" "${tasks[@]}" | sort)

    echo "Available tasks"
    for task in "${tasks[@]}"; do
        echo "➤ $task"
    done
    echo "Usage: $0 <task>"
}

# Run live development server in docker
task_docker_watch() {
    local compose_file="docker-compose.yaml"
    docker compose -f "$compose_file" down --remove-orphans
    docker compose -f "$compose_file" rm --force
    docker compose -f "$compose_file" up --build
}

repository="$(echo "$PACKAGE_NAME" | cut -d '/' -f 2-)"
readonly repository
readonly tag="$APP_VERSION"
# Build docker image for release
task_docker_build() {
    if docker images | grep "$repository:$tag"; then
        docker rmi "$repository:$tag" --force
    fi
    docker build --tag "$repository:$tag" --target production --platform linux/amd64 --build-arg BASE_IMAGE_TAG="$BASE_IMAGE_TAG" .
    print info "Image: $repository:$tag"
}

# Push production docker image to registry
task_docker_push() {
    if echo "$tag" | grep "dirty"; then
        print error "image tag is dirty. Please commit the changes and re-build the image."
        return 1
    fi
    if [[ -n "$DOCKERHUB_USERNAME" && -n "$DOCKERHUB_PASSWORD" ]]; then
        docker login --username "$DOCKERHUB_USERNAME" --password-stdin <<<"$DOCKERHUB_PASSWORD"
    fi
    docker tag "$repository:$tag" "$repository:latest"
    docker push "$repository:$tag"
    docker push "$repository:latest"
    echo
    print info "The following images were pushed to registry:
    - $repository:$tag
    - $repository:latest"
}

# Run live development server
task_watch() {
    local tmp_dir=".tmp"
    local build_cmd="go build --ldflags=\"-X $PACKAGE_NAME/internal/config.BuildId=$APP_NAME.$APP_VERSION-dev\" --race -o $tmp_dir/main  ."

    if ! command -v air &>/dev/null; then
        print loading "installing air..."
        go install github.com/air-verse/air@latest
    fi
    # build.kill_delay is in nanoseconds
    air --tmp_dir="$tmp_dir" --build.cmd "$build_cmd" --build.bin "$tmp_dir/main" --build.delay 0 --build.kill_delay 10000000000 \
        --build.include_ext "go,tmpl,env,json" --build.send_interrupt true --log.main_only true
}

readonly build_path="./bin/main"
# Build go app for production release and generate OpenAPI docs
task_build() {
    local build_id="$APP_NAME.$APP_VERSION"
    local build_cmd="CGO_ENABLED=0 go build \
        -ldflags='-s -w -X $PACKAGE_NAME/internal/config.BuildId=$build_id -extldflags \"-static\"' \
        --trimpath -o $build_path ."
    print loading "building app..."

    if go generate ./...; then
        print success "openapi docs generated"
    else
        print error "failed to generate openapi docs"
        return 1
    fi

    if ! eval "$build_cmd"; then
        print error "build failed"
        return 1
    fi

    if file "$build_path" | grep "dynamically linked" >/dev/null; then
        print error "fatal: binary is still dynamically linked."
        file "$build_path"
        return 1
    fi

    print success "build successful"
    print debug "build id: $build_id"
}

# Run go app build
task_start() {
    if [[ ! -x "$build_path" ]]; then
        print error "build not found."
        return 1
    fi
    "$build_path"
}

# Run tests
task_test() {
    go test --race --count=2 -v ./...
}

# Run tests and show coverage
task_test_cover() {
    go test --race --coverprofile=./tmp/coverage.out ./... && go tool cover --html=./tmp/coverage.out
}

# Run benchmarks
task_benchmark() {
    go test --race --count=2 -v --benchmem --bench=. ./...
}

# Clean go mod & cache & remove build artifacts
task_clean() {
    go mod tidy -v
    go clean --cache
    rm -rf ./bin ./.tmp
    print success "cleaned up successfully"
}

# Generate pprof profile
task_pprof() {
    curl "http://localhost:${PORT:-"8080"}/debug/pprof/profile?seconds=30" >default.pgo && print success "pprof profile generated successfully"
}

# Create a git checkpoint and push to origin
task_checkpoint() {
    if ! prompt "Create git checkpoint and push changes to origin?"; then
        print info "quitting..."
        return 1
    fi
    if ! task_build && ! prompt "Still continue?"; then
        print info "quitting..."
        return 1
    fi
    if git add . && git commit -m "Checkpoint at $(date -u)" && git push; then
        print success "Checkpoint created successfully ✔"
        return 0
    fi
    print error "Failed to create checkpoint"
}

# Upgrade dependencies
task_upgrade_deps() {
    if go get -u ./...; then
        print success "✔ Upgraded minor/patch versions of packages successfully"
        print info "To upgrade major versions, you have to run 'go get -u <package>@<version>' for each package manually"
        return 0
    fi
    print error "failed to upgrade packages"
}

if [[ -z "$(declare -F "task_$1")" ]]; then
    print_menu
else
    print info "Executing task: $*"
    "task_$*"
fi
