#!/usr/bin/env bash

set -e

set -o allexport

ENV_FILE="${ENV_FILE:-".env"}"
# shellcheck disable=SC1090
[[ -r $ENV_FILE ]] && source "$ENV_FILE"

PACKAGE_NAME=$(awk '/^module/ { print $2 }' go.mod)
APP_NAME="$(echo "$PACKAGE_NAME" | cut -d '/' -f 3)"
APP_VERSION="$(git describe --tags --always --dirty)"
GO_VERSION=$(awk '/^go/ { print $2 }' go.mod)
BASE_IMAGE_TAG=":$GO_VERSION-alpine3.20"

set +o allexport

prompt() {
    read -p "$1 [y/n]: " -s -n 1 -r res
    echo
    [[ "$res" =~ ^[Yy]$ ]]
}

print_colored() {
    local text="$2"
    local -A colors=(["grey"]="30" ["red"]="31" ["green"]="32" ["yellow"]="33" ["blue"]="34" ["magenta"]="35" ["cyan"]="36" ["white"]="37")
    if tput colors &>/dev/null; then
        printf "\x1b[%sm%s\x1b[0m\n" "${colors[$1]:-0}" "$text"
    else
        printf "%s\n" "$text"
    fi
}

print_menu() {
    local -a tasks
    while read -r n task_name; do
        task_name=$(echo "$task_name" | sed 's/task_//; s/() {//')
        task_desc=$(awk "NR==$((n - 1))" "$0")
        tasks+=("$(printf "%-16s - %s\n" "$task_name" "${task_desc:1}")")
    done <<<"$(awk '/^task_/ { print NR, $0 }' "$0")"

    mapfile -t tasks < <(printf "%s\n" "${tasks[@]}" | sort)

    print_colored magenta "Available tasks"
    for task in "${tasks[@]}"; do
        echo "➤ $task"
    done
    print_colored blue "Usage: $0 <task>"
}

# Run live development server in docker
task_docker_watch() {
    local compose_file="docker-compose.yaml"
    docker compose -f "$compose_file" down --remove-orphans
    docker compose -f "$compose_file" rm --force
    docker compose -f "$compose_file" up --build
}

repository="$(echo "$PACKAGE_NAME" | cut -d '/' -f 2-)"
tag="$APP_VERSION"
# Build docker image for release
task_docker_build() {
    if docker images | grep "$repository:$tag"; then
        docker rmi "$repository:$tag" --force
    fi
    docker build --tag "$repository:$tag" --target production --platform linux/amd64 --build-arg BASE_IMAGE_TAG="$BASE_IMAGE_TAG" \
        --cache-from type=registry,ref="$repository" --cache-to type=registry,ref="$repository,mode=max,ignore-error=true" .
    echo -e "\n➤ Image: $repository:$tag"
}

# Push production docker image to registry
task_docker_push() {
    if grep "dirty" <<<"$tag"; then
        print_colored red "ERROR: Tag is dirty. Please commit changes and re-run task."
        return 1
    fi
    docker login --username "$DOCKERHUB_USERNAME" --password "$DOCKERHUB_PASSWORD"
    docker push "$repository:$tag"
    # Tag and push image as latest
    docker tag "$repository:$tag" "$repository:latest"
    docker push "$repository:latest"
    echo \
        "The following images were pushed to registry:
    - $repository:$tag
    - $repository:latest"
}

# Run live development server
task_watch() {
    local tmp_dir=".tmp"
    local build_cmd="go build --ldflags=\"-X $PACKAGE_NAME/internal/config.BuildId=$APP_NAME.$APP_VERSION-dev\" --race -o $tmp_dir/main  ."
    # build.kill_delay is in nanoseconds
    air --tmp_dir="$tmp_dir" --build.cmd "$build_cmd" --build.bin "$tmp_dir/main" --build.delay 0 --build.kill_delay 10000000000 \
        --build.include_ext "go,tmpl,env,json" --build.send_interrupt true --log.main_only true
}

readonly build_path="./bin/main"
# Build go app for production release and generate OpenAPI docs
task_build() {
    local build_id="$APP_NAME.$APP_VERSION"
    local build_cmd="go generate ./... && CGO_ENABLED=0 go build \
        -ldflags='-s -w -X $PACKAGE_NAME/internal/config.BuildId=$build_id -extldflags \"-static\"' \
        --trimpath -o $build_path ."

    if ! eval "$build_cmd"; then
        print_colored red "Build failed"
        return 1
    fi

    if file "$build_path" | grep "dynamically linked" >/dev/null; then
        print_colored red "ERROR: Binary is still dynamically linked."
        file "$build_path"
        return 1
    fi
    print_colored green "Build successful ✔ $(print_colored grey "($build_id)")"
}

# Run go app build
task_start() {
    if [[ ! -x "$build_path" ]]; then
        print_colored red "Build not found."
        return 1
    fi
    "$build_path"
}

# Run tests
task_test() {
    go test --race --count=2 -v ./...
}

# Run tests and show coverage
task_test_cover() {
    go test --race --coverprofile=./tmp/coverage.out ./... && go tool cover --html=./tmp/coverage.out
}

# Run benchmarks
task_benchmark() {
    go test --race --count=2 -v --benchmem --bench=. ./...
}

# Clean go mod & cache & remove build artifacts
task_clean() {
    go mod tidy -v
    go clean --cache
    rm -rf ./bin ./.tmp
    print_colored green "Cleaned up successfully ✔"
}

# Generate pprof profile
task_pprof() {
    curl "http://localhost:${PORT:-"8080"}/debug/pprof/profile?seconds=30" >default.pgo && print_colored green "Generated pprof profile successfully ✔"
}

# Create a git checkpoint and push to origin
task_checkpoint() {
    if ! prompt "Create git checkpoint and push changes to origin?"; then
        print_colored magenta "Quitting..."
        return 1
    fi
    if git add . && git commit -m "Checkpoint at $(date '+%Y-%m-%dT%H:%M:%S%z')" && git push; then
        print_colored green "Created checkpoint successfully ✔"
        return 0
    fi
    print_colored red "Failed to create checkpoint"
}

# Upgrade dependencies
task_upgrade_deps() {
    if go get -u ./...; then
        print_colored green "Upgraded minor/patch versions of packages successfully ✔"
        echo "To upgrade major versions, you have to run 'go get -u <package>@<version>' for each package manually"
        return 0
    fi
    print_colored red "Failed to upgrade packages"
}

if [[ -z "$(declare -F "task_$1")" ]]; then
    print_menu
else
    echo "➤ Executing task: $*"
    "task_$*"
fi
